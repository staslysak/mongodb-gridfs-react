{"version":3,"sources":["api.js","App.js","utils.js","serviceWorker.js","index.js"],"names":["api","getImages","a","async","fetch","then","res","json","files","deleteImage","id","method","postImages","data","body","headers","console","log","useStyles","makeStyles","card","maxWidth","width","margin","media","minHeight","App","classes","React","useState","images","formImages","state","setstate","useEffect","Container","Typography","paragraph","variant","align","onSubmit","e","formData","FormData","name","append","formatData","preventDefault","Box","display","accept","style","type","multiple","onChange","target","htmlFor","alignItems","color","IconButton","aria-label","component","Button","height","whiteSpace","overflow","textOverflow","verticalAlign","lineHeight","str","Object","values","slice","displayFilesNames","flexWrap","length","map","item","Card","className","key","filename","CardMedia","image","process","title","CardActions","href","onClick","_id","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ce142943.chunk.js","sourcesContent":["const api = {\r\n  getImages: async () => {\r\n    return await fetch('/files')\r\n      .then(res => res.json())\r\n      .then(res => res.files)\r\n  },\r\n  deleteImage: async (id) => {\r\n    return await fetch('/files/' + id, {\r\n      method: 'DELETE',\r\n    })\r\n      .then(() => api.getImages())\r\n  },\r\n  postImages: async (data) => {\r\n    return await fetch('/upload', {\r\n      method: 'POST',\r\n      body: data,\r\n      headers: {\r\n        // 'Accept': 'image/png, image/jpeg',\r\n        // 'Content-Type': 'multipart/form-data'\r\n      },\r\n    })\r\n      .then(res => res.json())\r\n      .then(res => console.log(res))\r\n      .then(() => api.getImages())\r\n  }\r\n}\r\n\r\nexport default api\r\n","import React from 'react';\nimport api from './api';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport IconButton from '@material-ui/core/IconButton';\nimport PhotoCamera from '@material-ui/icons/PhotoCamera';\nimport Card from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\nimport Box from \"@material-ui/core/Box\";\nimport {displayFilesNames, formatData} from './utils';\n\n\nconst useStyles = makeStyles({\n  card: {\n    maxWidth: 345,\n    width: '100%',\n    margin: 20\n  },\n  media: {\n    minHeight: 345,\n  },\n});\n\nfunction App() {\n  const classes = useStyles();\n  const [state, setstate] = React.useState({\n    images: [],\n    formImages: []\n  })\n\n  React.useEffect(() => {\n    api.getImages()\n      .then((images = []) => setstate({images}))\n  }, [])\n\n  const handleChange = (e) => {\n    setstate({...state, formImages: e.target.files})\n  }\n\n  const handleDelete = (id) => {\n    api.deleteImage(id)\n    .then(images => setstate({...state, images}))\n  }\n\n  const onSubmit = (e) => {\n    const data = formatData(state.formImages)\n    api.postImages(data)\n    .then(images => setstate({...state, images}))\n    \n    e.preventDefault()\n  }\n\n  const renderImages = () => {\n    return state.images.map((item) => (\n      <Card className={classes.card} key={item.filename}>\n        <CardMedia\n          className={classes.media}\n          image={process.env.REACT_APP_API + '/image/' + item.filename}\n          title={item.filename}\n        />\n        <CardActions>\n          <Button color=\"primary\" component='a' href={process.env.REACT_APP_API + '/image/' + item.filename}>\n            View\n          </Button>\n          <Button color=\"secondary\" onClick={() => handleDelete(item._id)}>\n            Delete\n          </Button>\n        </CardActions>\n      </Card>\n    ))\n  }\n\n  return (\n    <Container>\n      <Typography paragraph variant='h4' align='center'>\n        GridFS File Uploads\n      </Typography>\n      <form onSubmit={onSubmit}>\n        <Box display='flex'>\n          <input\n            accept=\"image/*\"\n            style={{display: 'none'}}\n            type='file' \n            name='file' \n            id='file' \n            multiple \n            onChange={handleChange} \n          />\n          <label htmlFor=\"file\" style={{margin: 0, display: 'flex', alignItems: 'center', color: 'inherit'}}>\n            <IconButton \n              color='inherit' \n              aria-label=\"upload picture\" \n              component=\"span\"\n            >\n              <PhotoCamera />\n            </IconButton>\n          </label>\n          <Button type='submit' color='inherit'>Submit</Button>\n        </Box>\n      </form>\n      <Typography \n        paragraph\n        style={{\n            height: '100%',\n            whiteSpace: 'nowrap', \n            overflow: 'hidden', \n            textOverflow: 'ellipsis', \n            maxWidth: 200, \n            margin: 0, \n            verticalAlign: 'middle',\n            lineHeight: 1,\n            width: '100%'\n          }}\n        >\n          {(state.formImages) && displayFilesNames(state.formImages)}\n        </Typography>\n\n      <Box display='flex' flexWrap='wrap'>\n        {(state.images && state.images.length) ? renderImages() : 'No Images'}\n      </Box>\n    </Container>\n  );\n}\n\nexport default App;\n","export const displayFilesNames = (data) => {\r\n  let str = ''\r\n  for(let item of Object.values(data)){\r\n    str += item.name + ', '\r\n  }\r\n  return str.slice(0, -2)\r\n}\r\n\r\nexport const formatData = (data) => {\r\n  const formData = new FormData();\r\n  for(const name in data) {\r\n    if(name === 'length') continue;\r\n    formData.append('file', data[name]);\r\n  }\r\n  return formData;\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}